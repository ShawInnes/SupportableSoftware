using SmartUnitTestsDemo;
using Microsoft.Pex.Framework.Generated;
using Microsoft.VisualStudio.TestTools.UnitTesting;
// <copyright file="TriangleFunctionsTest.GetTriangleType.g.cs">Copyright ©  2014</copyright>
// <auto-generated>
// This file contains automatically generated tests.
// Do not modify this file manually.
// 
// If the contents of this file becomes outdated, you can delete it.
// For example, if it no longer compiles.
// </auto-generated>

namespace SmartUnitTestsDemo.Tests
{
    public partial class TriangleFunctionsTest
    {
[TestMethod]
[PexGeneratedBy(typeof(TriangleFunctionsTest))]
public void GetTriangleType526()
{
    TriangleType i;
    TriangleFunctions s0 = new TriangleFunctions();
    i = this.GetTriangleType(s0, 2, 2, 2);
    Assert.AreEqual<TriangleType>(TriangleType.Equilateral, i);
    Assert.IsNotNull((object)s0);
}
[TestMethod]
[PexGeneratedBy(typeof(TriangleFunctionsTest))]
public void GetTriangleType260()
{
    TriangleType i;
    TriangleFunctions s0 = new TriangleFunctions();
    i = this.GetTriangleType(s0, 68, 485, 514);
    Assert.AreEqual<TriangleType>(TriangleType.Scalene, i);
    Assert.IsNotNull((object)s0);
}
[TestMethod]
[PexGeneratedBy(typeof(TriangleFunctionsTest))]
public void GetTriangleType200()
{
    TriangleType i;
    TriangleFunctions s0 = new TriangleFunctions();
    i = this.GetTriangleType(s0, 66, 66, 19);
    Assert.AreEqual<TriangleType>(TriangleType.Isosceles, i);
    Assert.IsNotNull((object)s0);
}
[TestMethod]
[PexGeneratedBy(typeof(TriangleFunctionsTest))]
public void GetTriangleType681()
{
    TriangleType i;
    TriangleFunctions s0 = new TriangleFunctions();
    i = this.GetTriangleType(s0, 258, 795, 795);
    Assert.AreEqual<TriangleType>(TriangleType.Isosceles, i);
    Assert.IsNotNull((object)s0);
}
[TestMethod]
[PexGeneratedBy(typeof(TriangleFunctionsTest))]
public void GetTriangleType593()
{
    TriangleType i;
    TriangleFunctions s0 = new TriangleFunctions();
    i = this.GetTriangleType(s0, 365, 658, 134);
    Assert.AreEqual<TriangleType>(TriangleType.Illegal, i);
    Assert.IsNotNull((object)s0);
}
[TestMethod]
[PexGeneratedBy(typeof(TriangleFunctionsTest))]
public void GetTriangleType69()
{
    TriangleType i;
    TriangleFunctions s0 = new TriangleFunctions();
    i = this.GetTriangleType(s0, 705, 289, 994);
    Assert.AreEqual<TriangleType>(TriangleType.Illegal, i);
    Assert.IsNotNull((object)s0);
}
[TestMethod]
[PexGeneratedBy(typeof(TriangleFunctionsTest))]
[PexRaisedException(typeof(AssertFailedException))]
public void GetTriangleTypeThrowsAssertFailedException171()
{
    TriangleType i;
    TriangleFunctions s0 = new TriangleFunctions();
    i = this.GetTriangleType(s0, 0, 0, 0);
}
[TestMethod]
[PexGeneratedBy(typeof(TriangleFunctionsTest))]
[PexRaisedException(typeof(AssertFailedException))]
public void GetTriangleTypeThrowsAssertFailedException289()
{
    TriangleType i;
    TriangleFunctions s0 = new TriangleFunctions();
    i = this.GetTriangleType(s0, 2, 0, 0);
}
[TestMethod]
[PexGeneratedBy(typeof(TriangleFunctionsTest))]
[PexRaisedException(typeof(AssertFailedException))]
public void GetTriangleTypeThrowsAssertFailedException56()
{
    TriangleType i;
    TriangleFunctions s0 = new TriangleFunctions();
    i = this.GetTriangleType(s0, 2, 2, 0);
}
[TestMethod]
[PexGeneratedBy(typeof(TriangleFunctionsTest))]
public void GetTriangleType383()
{
    TriangleType i;
    TriangleFunctions s0 = new TriangleFunctions();
    i = this.GetTriangleType(s0, 936, 72, 597);
    Assert.AreEqual<TriangleType>(TriangleType.Illegal, i);
    Assert.IsNotNull((object)s0);
}
    }
}
